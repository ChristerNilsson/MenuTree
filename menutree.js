// Generated by CoffeeScript 2.7.0
var Button, buttons, current, draw, echo, indexes, path, tree, update,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

echo = console.log;

tree = null;

buttons = [];

current = null; // pekar på ett delträd

path = []; // anger hela trädet

indexes = [0]; // default markeras första valet

Button = class Button {
  constructor(text1, x, y, index1) {
    this.text = text1;
    this.x = x;
    this.y = y;
    this.index = index1;
  }

  draw() {
    fill(this.index === _.last(indexes) ? 'yellow' : 'black');
    return text(this.text, this.x, this.y);
  }

};

window.preload = function() {
  return tree = loadJSON('menutree.json');
};

window.setup = function() {
  var i, keys;
  createCanvas(400, 300);
  noStroke();
  current = path.length === 0 ? tree : _.get(tree, path);
  echo('path', path);
  echo('current', current);
  keys = _.keys(current);
  buttons = (function() {
    var j, len, ref, results;
    ref = _.range(keys.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(new Button(keys[i], 10, 40 + 20 * i, i));
    }
    return results;
  })();
  echo('buttons', buttons);
  return draw();
};

draw = function() {
  var button, j, len, results, s;
  echo('draw', typeof current);
  background('gray');
  s = path.join(' • ');
  fill('white');
  echo('s', s);
  text(s, 10, 20);
  if ('string' === typeof current) {
    text(current, 10, 20);
  }
  if ('object' === typeof current) {
    results = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      results.push(button.draw());
    }
    return results;
  }
};

update = function() {
  var i, keys;
  current = path.length === 0 ? tree : _.get(tree, path);
  keys = _.keys(current);
  return buttons = (function() {
    var j, len, ref, results;
    ref = _.range(keys.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(new Button(keys[i], 10, 40 + 20 * i, i));
    }
    return results;
  })();
};

window.keyPressed = function() {
  var index, n;
  echo(key);
  n = indexes.length;
  echo('n', n);
  index = indexes[n - 1];
  if (key === 'ArrowDown') {
    index = modulo(index + 1, buttons.length);
  }
  if (key === 'ArrowUp') {
    index = modulo(index - 1, buttons.length);
  }
  indexes[n - 1] = index;
  echo('indexes', indexes, n);
  if (indexOf.call('Escape ArrowLeft'.split(' '), key) >= 0) {
    if (path.length === 0 || indexes.length === 1) {
      return;
    }
    path.pop();
    indexes.pop();
    update();
  }
  if (indexOf.call('Enter ArrowRight'.split(' '), key) >= 0) {
    path.push(buttons[_.last(indexes)].text);
    indexes.push(0);
    update();
  }
  return draw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudXRyZWUuanMiLCJzb3VyY2VSb290IjoiXFwiLCJzb3VyY2VzIjpbIm1lbnV0cmVlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUE7RUFBQTs7O0FBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixJQUFBLEdBQU87O0FBQ1AsT0FBQSxHQUFVOztBQUVWLE9BQUEsR0FBVSxLQUpWOztBQU1BLElBQUEsR0FBTyxHQU5QOztBQU9BLE9BQUEsR0FBVSxDQUFDLENBQUQsRUFQVjs7QUFTTSxTQUFOLE1BQUEsT0FBQTtFQUNDLFdBQWMsTUFBQSxHQUFBLEdBQUEsUUFBQSxDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQU0sSUFBQyxDQUFBO0lBQUcsSUFBQyxDQUFBO0lBQUcsSUFBQyxDQUFBO0VBQWpCOztFQUNkLElBQU8sQ0FBQSxDQUFBO0lBQ04sSUFBQSxDQUFRLElBQUMsQ0FBQSxLQUFELEtBQVUsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQLENBQWIsR0FBaUMsUUFBakMsR0FBK0MsT0FBcEQ7V0FDQSxJQUFBLENBQUssSUFBQyxDQUFBLElBQU4sRUFBVyxJQUFDLENBQUEsQ0FBWixFQUFjLElBQUMsQ0FBQSxDQUFmO0VBRk07O0FBRlI7O0FBTUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsUUFBQSxDQUFBLENBQUE7U0FBRyxJQUFBLEdBQU8sUUFBQSxDQUFTLGVBQVQ7QUFBVjs7QUFFakIsTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNmLE1BQUEsQ0FBQSxFQUFBO0VBQUMsWUFBQSxDQUFhLEdBQWIsRUFBa0IsR0FBbEI7RUFDQSxRQUFBLENBQUE7RUFDQSxPQUFBLEdBQWEsSUFBSSxDQUFDLE1BQUwsS0FBZSxDQUFsQixHQUF5QixJQUF6QixHQUFtQyxDQUFD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LE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRixDQUFPLE9BQVAsQ0FBRCxDQUFnQixDQUFDLElBQWxDO0lBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFiO0lBQ0EsTUFBQSxDQUFBLEVBSEQ7O1NBS0EsSUFBQSxDQUFBO0FBdEJtQiIsInNvdXJjZXNDb250ZW50IjpbImVjaG8gPSBjb25zb2xlLmxvZ1xyXG50cmVlID0gbnVsbFxyXG5idXR0b25zID0gW11cclxuXHJcbmN1cnJlbnQgPSBudWxsICMgcGVrYXIgcMOlIGV0dCBkZWx0csOkZFxyXG5cclxucGF0aCA9IFtdICMgYW5nZXIgaGVsYSB0csOkZGV0XHJcbmluZGV4ZXMgPSBbMF0gIyBkZWZhdWx0IG1hcmtlcmFzIGbDtnJzdGEgdmFsZXRcclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEB0ZXh0LCBAeCwgQHksIEBpbmRleCkgLT5cclxuXHRkcmF3IDogKCkgLT4gXHJcblx0XHRmaWxsIGlmIEBpbmRleCA9PSBfLmxhc3QgaW5kZXhlcyB0aGVuICd5ZWxsb3cnIGVsc2UgJ2JsYWNrJ1xyXG5cdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cclxud2luZG93LnByZWxvYWQgPSAtPiB0cmVlID0gbG9hZEpTT04gJ21lbnV0cmVlLmpzb24nXHJcblxyXG53aW5kb3cuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyA0MDAsIDMwMFxyXG5cdG5vU3Ryb2tlKClcclxuXHRjdXJyZW50ID0gaWYgcGF0aC5sZW5ndGggPT0gMCB0aGVuIHRyZWUgZWxzZSBfLmdldCB0cmVlLCBwYXRoXHJcblx0ZWNobyAncGF0aCcscGF0aFxyXG5cdGVjaG8gJ2N1cnJlbnQnLCBjdXJyZW50XHJcblxyXG5cdGtleXMgPSBfLmtleXMgY3VycmVudFxyXG5cdGJ1dHRvbnMgPSAobmV3IEJ1dHRvbiBrZXlzW2ldLDEwLDQwKzIwKmksaSBmb3IgaSBpbiBfLnJhbmdlIGtleXMubGVuZ3RoKVxyXG5cdGVjaG8gJ2J1dHRvbnMnLGJ1dHRvbnNcclxuXHJcblx0ZHJhdygpXHJcblxyXG5kcmF3ID0gLT5cclxuXHJcblx0ZWNobyAnZHJhdycsIHR5cGVvZiBjdXJyZW50XHJcblx0YmFja2dyb3VuZCAnZ3JheSdcclxuXHRzID0gcGF0aC5qb2luICcg4oCiICdcclxuXHRmaWxsICd3aGl0ZSdcclxuXHRlY2hvICdzJyxzXHJcblx0dGV4dCBzLCAxMCwgMjBcclxuXHRpZiAnc3RyaW5nJyA9PSB0eXBlb2YgY3VycmVudFxyXG5cdFx0dGV4dCBjdXJyZW50LDEwLDIwXHJcblx0aWYgJ29iamVjdCcgPT0gdHlwZW9mIGN1cnJlbnRcclxuXHRcdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0XHRidXR0b24uZHJhdygpXHJcblxyXG51cGRhdGUgPSAtPlxyXG5cdGN1cnJlbnQgPSBpZiBwYXRoLmxlbmd0aCA9PSAwIHRoZW4gdHJlZSBlbHNlIF8uZ2V0IHRyZWUsIHBhdGhcclxuXHRrZXlzID0gXy5rZXlzIGN1cnJlbnRcclxuXHRidXR0b25zID0gKG5ldyBCdXR0b24ga2V5c1tpXSwxMCw0MCsyMCppLGkgZm9yIGkgaW4gXy5yYW5nZSBrZXlzLmxlbmd0aClcclxuXHJcbndpbmRvdy5rZXlQcmVzc2VkID0gKCkgLT5cclxuXHRlY2hvIGtleVxyXG5cclxuXHRuID0gaW5kZXhlcy5sZW5ndGhcclxuXHRlY2hvICduJyxuXHJcblx0aW5kZXggPSBpbmRleGVzW24tMV1cclxuXHRpZiBrZXkgPT0gJ0Fycm93RG93bicgdGhlbiBpbmRleCA9IChpbmRleCArIDEpICUlIGJ1dHRvbnMubGVuZ3RoXHJcblx0aWYga2V5ID09ICdBcnJvd1VwJyAgIHRoZW4gaW5kZXggPSAoaW5kZXggLSAxKSAlJSBidXR0b25zLmxlbmd0aFxyXG5cdGluZGV4ZXNbbi0xXSA9IGluZGV4XHJcblx0ZWNobyAnaW5kZXhlcycsaW5kZXhlcyxuXHJcblxyXG5cdGlmIGtleSBpbiAnRXNjYXBlIEFycm93TGVmdCcuc3BsaXQgJyAnXHJcblx0XHRpZiBwYXRoLmxlbmd0aCA9PSAwIG9yIGluZGV4ZXMubGVuZ3RoID09IDEgdGhlbiByZXR1cm5cclxuXHRcdHBhdGgucG9wKClcclxuXHRcdGluZGV4ZXMucG9wKClcclxuXHRcdHVwZGF0ZSgpXHJcblxyXG5cdGlmIGtleSBpbiAnRW50ZXIgQXJyb3dSaWdodCcuc3BsaXQgJyAnXHJcblx0XHRwYXRoLnB1c2ggYnV0dG9uc1tfLmxhc3QgaW5kZXhlc10udGV4dFxyXG5cdFx0aW5kZXhlcy5wdXNoIDBcclxuXHRcdHVwZGF0ZSgpXHJcblxyXG5cdGRyYXcoKVxyXG4iXX0=
//# sourceURL=c:\github\MenuTree\menutree.coffee